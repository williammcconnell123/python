# coding: utf-8

"""
    Weather API

    # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY    # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'region': 'str',
        'country': 'str',
        'lat': 'float',
        'lon': 'float',
        'tz_id': 'str',
        'localtime_epoch': 'int',
        'localtime': 'str'
    }

    attribute_map = {
        'name': 'name',
        'region': 'region',
        'country': 'country',
        'lat': 'lat',
        'lon': 'lon',
        'tz_id': 'tz_id',
        'localtime_epoch': 'localtime_epoch',
        'localtime': 'localtime'
    }

    def __init__(self, name=None, region=None, country=None, lat=None, lon=None, tz_id=None, localtime_epoch=None, localtime=None, _configuration=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._region = None
        self._country = None
        self._lat = None
        self._lon = None
        self._tz_id = None
        self._localtime_epoch = None
        self._localtime = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if tz_id is not None:
            self.tz_id = tz_id
        if localtime_epoch is not None:
            self.localtime_epoch = localtime_epoch
        if localtime is not None:
            self.localtime = localtime

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501


        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this Location.  # noqa: E501


        :return: The region of this Location.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Location.


        :param region: The region of this Location.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country(self):
        """Gets the country of this Location.  # noqa: E501


        :return: The country of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.


        :param country: The country of this Location.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def lat(self):
        """Gets the lat of this Location.  # noqa: E501


        :return: The lat of this Location.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.


        :param lat: The lat of this Location.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Location.  # noqa: E501


        :return: The lon of this Location.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Location.


        :param lon: The lon of this Location.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def tz_id(self):
        """Gets the tz_id of this Location.  # noqa: E501


        :return: The tz_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._tz_id

    @tz_id.setter
    def tz_id(self, tz_id):
        """Sets the tz_id of this Location.


        :param tz_id: The tz_id of this Location.  # noqa: E501
        :type: str
        """

        self._tz_id = tz_id

    @property
    def localtime_epoch(self):
        """Gets the localtime_epoch of this Location.  # noqa: E501


        :return: The localtime_epoch of this Location.  # noqa: E501
        :rtype: int
        """
        return self._localtime_epoch

    @localtime_epoch.setter
    def localtime_epoch(self, localtime_epoch):
        """Sets the localtime_epoch of this Location.


        :param localtime_epoch: The localtime_epoch of this Location.  # noqa: E501
        :type: int
        """

        self._localtime_epoch = localtime_epoch

    @property
    def localtime(self):
        """Gets the localtime of this Location.  # noqa: E501


        :return: The localtime of this Location.  # noqa: E501
        :rtype: str
        """
        return self._localtime

    @localtime.setter
    def localtime(self, localtime):
        """Sets the localtime of this Location.


        :param localtime: The localtime of this Location.  # noqa: E501
        :type: str
        """

        self._localtime = localtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Location):
            return True

        return self.to_dict() != other.to_dict()
