# coding: utf-8

"""
    Weather API

    # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY    # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertsAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headline': 'str',
        'msgtype': 'str',
        'severity': 'str',
        'urgency': 'str',
        'areas': 'str',
        'category': 'str',
        'certainty': 'str',
        'event': 'str',
        'note': 'str',
        'effective': 'datetime',
        'expires': 'datetime',
        'desc': 'str',
        'instruction': 'str'
    }

    attribute_map = {
        'headline': 'headline',
        'msgtype': 'msgtype',
        'severity': 'severity',
        'urgency': 'urgency',
        'areas': 'areas',
        'category': 'category',
        'certainty': 'certainty',
        'event': 'event',
        'note': 'note',
        'effective': 'effective',
        'expires': 'expires',
        'desc': 'desc',
        'instruction': 'instruction'
    }

    def __init__(self, headline=None, msgtype=None, severity=None, urgency=None, areas=None, category=None, certainty=None, event=None, note=None, effective=None, expires=None, desc=None, instruction=None, _configuration=None):  # noqa: E501
        """AlertsAlert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._headline = None
        self._msgtype = None
        self._severity = None
        self._urgency = None
        self._areas = None
        self._category = None
        self._certainty = None
        self._event = None
        self._note = None
        self._effective = None
        self._expires = None
        self._desc = None
        self._instruction = None
        self.discriminator = None

        if headline is not None:
            self.headline = headline
        if msgtype is not None:
            self.msgtype = msgtype
        if severity is not None:
            self.severity = severity
        if urgency is not None:
            self.urgency = urgency
        if areas is not None:
            self.areas = areas
        if category is not None:
            self.category = category
        if certainty is not None:
            self.certainty = certainty
        if event is not None:
            self.event = event
        if note is not None:
            self.note = note
        if effective is not None:
            self.effective = effective
        if expires is not None:
            self.expires = expires
        if desc is not None:
            self.desc = desc
        if instruction is not None:
            self.instruction = instruction

    @property
    def headline(self):
        """Gets the headline of this AlertsAlert.  # noqa: E501


        :return: The headline of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this AlertsAlert.


        :param headline: The headline of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def msgtype(self):
        """Gets the msgtype of this AlertsAlert.  # noqa: E501


        :return: The msgtype of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._msgtype

    @msgtype.setter
    def msgtype(self, msgtype):
        """Sets the msgtype of this AlertsAlert.


        :param msgtype: The msgtype of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._msgtype = msgtype

    @property
    def severity(self):
        """Gets the severity of this AlertsAlert.  # noqa: E501


        :return: The severity of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertsAlert.


        :param severity: The severity of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def urgency(self):
        """Gets the urgency of this AlertsAlert.  # noqa: E501


        :return: The urgency of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this AlertsAlert.


        :param urgency: The urgency of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._urgency = urgency

    @property
    def areas(self):
        """Gets the areas of this AlertsAlert.  # noqa: E501


        :return: The areas of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this AlertsAlert.


        :param areas: The areas of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._areas = areas

    @property
    def category(self):
        """Gets the category of this AlertsAlert.  # noqa: E501


        :return: The category of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AlertsAlert.


        :param category: The category of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def certainty(self):
        """Gets the certainty of this AlertsAlert.  # noqa: E501


        :return: The certainty of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this AlertsAlert.


        :param certainty: The certainty of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._certainty = certainty

    @property
    def event(self):
        """Gets the event of this AlertsAlert.  # noqa: E501


        :return: The event of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AlertsAlert.


        :param event: The event of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def note(self):
        """Gets the note of this AlertsAlert.  # noqa: E501


        :return: The note of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AlertsAlert.


        :param note: The note of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def effective(self):
        """Gets the effective of this AlertsAlert.  # noqa: E501


        :return: The effective of this AlertsAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._effective

    @effective.setter
    def effective(self, effective):
        """Sets the effective of this AlertsAlert.


        :param effective: The effective of this AlertsAlert.  # noqa: E501
        :type: datetime
        """

        self._effective = effective

    @property
    def expires(self):
        """Gets the expires of this AlertsAlert.  # noqa: E501


        :return: The expires of this AlertsAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this AlertsAlert.


        :param expires: The expires of this AlertsAlert.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def desc(self):
        """Gets the desc of this AlertsAlert.  # noqa: E501


        :return: The desc of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this AlertsAlert.


        :param desc: The desc of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def instruction(self):
        """Gets the instruction of this AlertsAlert.  # noqa: E501


        :return: The instruction of this AlertsAlert.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this AlertsAlert.


        :param instruction: The instruction of this AlertsAlert.  # noqa: E501
        :type: str
        """

        self._instruction = instruction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertsAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertsAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertsAlert):
            return True

        return self.to_dict() != other.to_dict()
