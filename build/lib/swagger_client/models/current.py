# coding: utf-8

"""
    Weather API

    # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY    # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Current(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated_epoch': 'int',
        'last_updated': 'str',
        'temp_c': 'float',
        'temp_f': 'float',
        'is_day': 'int',
        'condition': 'CurrentCondition',
        'wind_mph': 'float',
        'wind_kph': 'float',
        'wind_degree': 'float',
        'wind_dir': 'str',
        'pressure_mb': 'float',
        'pressure_in': 'float',
        'precip_mm': 'float',
        'precip_in': 'float',
        'humidity': 'float',
        'cloud': 'float',
        'feelslike_c': 'float',
        'feelslike_f': 'float',
        'vis_km': 'float',
        'vis_miles': 'float',
        'uv': 'int',
        'gust_mph': 'float',
        'gust_kph': 'float',
        'air_quality': 'CurrentAirQuality'
    }

    attribute_map = {
        'last_updated_epoch': 'last_updated_epoch',
        'last_updated': 'last_updated',
        'temp_c': 'temp_c',
        'temp_f': 'temp_f',
        'is_day': 'is_day',
        'condition': 'condition',
        'wind_mph': 'wind_mph',
        'wind_kph': 'wind_kph',
        'wind_degree': 'wind_degree',
        'wind_dir': 'wind_dir',
        'pressure_mb': 'pressure_mb',
        'pressure_in': 'pressure_in',
        'precip_mm': 'precip_mm',
        'precip_in': 'precip_in',
        'humidity': 'humidity',
        'cloud': 'cloud',
        'feelslike_c': 'feelslike_c',
        'feelslike_f': 'feelslike_f',
        'vis_km': 'vis_km',
        'vis_miles': 'vis_miles',
        'uv': 'uv',
        'gust_mph': 'gust_mph',
        'gust_kph': 'gust_kph',
        'air_quality': 'air_quality'
    }

    def __init__(self, last_updated_epoch=None, last_updated=None, temp_c=None, temp_f=None, is_day=None, condition=None, wind_mph=None, wind_kph=None, wind_degree=None, wind_dir=None, pressure_mb=None, pressure_in=None, precip_mm=None, precip_in=None, humidity=None, cloud=None, feelslike_c=None, feelslike_f=None, vis_km=None, vis_miles=None, uv=None, gust_mph=None, gust_kph=None, air_quality=None, _configuration=None):  # noqa: E501
        """Current - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_updated_epoch = None
        self._last_updated = None
        self._temp_c = None
        self._temp_f = None
        self._is_day = None
        self._condition = None
        self._wind_mph = None
        self._wind_kph = None
        self._wind_degree = None
        self._wind_dir = None
        self._pressure_mb = None
        self._pressure_in = None
        self._precip_mm = None
        self._precip_in = None
        self._humidity = None
        self._cloud = None
        self._feelslike_c = None
        self._feelslike_f = None
        self._vis_km = None
        self._vis_miles = None
        self._uv = None
        self._gust_mph = None
        self._gust_kph = None
        self._air_quality = None
        self.discriminator = None

        if last_updated_epoch is not None:
            self.last_updated_epoch = last_updated_epoch
        if last_updated is not None:
            self.last_updated = last_updated
        if temp_c is not None:
            self.temp_c = temp_c
        if temp_f is not None:
            self.temp_f = temp_f
        if is_day is not None:
            self.is_day = is_day
        if condition is not None:
            self.condition = condition
        if wind_mph is not None:
            self.wind_mph = wind_mph
        if wind_kph is not None:
            self.wind_kph = wind_kph
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if pressure_mb is not None:
            self.pressure_mb = pressure_mb
        if pressure_in is not None:
            self.pressure_in = pressure_in
        if precip_mm is not None:
            self.precip_mm = precip_mm
        if precip_in is not None:
            self.precip_in = precip_in
        if humidity is not None:
            self.humidity = humidity
        if cloud is not None:
            self.cloud = cloud
        if feelslike_c is not None:
            self.feelslike_c = feelslike_c
        if feelslike_f is not None:
            self.feelslike_f = feelslike_f
        if vis_km is not None:
            self.vis_km = vis_km
        if vis_miles is not None:
            self.vis_miles = vis_miles
        if uv is not None:
            self.uv = uv
        if gust_mph is not None:
            self.gust_mph = gust_mph
        if gust_kph is not None:
            self.gust_kph = gust_kph
        if air_quality is not None:
            self.air_quality = air_quality

    @property
    def last_updated_epoch(self):
        """Gets the last_updated_epoch of this Current.  # noqa: E501


        :return: The last_updated_epoch of this Current.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_epoch

    @last_updated_epoch.setter
    def last_updated_epoch(self, last_updated_epoch):
        """Sets the last_updated_epoch of this Current.


        :param last_updated_epoch: The last_updated_epoch of this Current.  # noqa: E501
        :type: int
        """

        self._last_updated_epoch = last_updated_epoch

    @property
    def last_updated(self):
        """Gets the last_updated of this Current.  # noqa: E501


        :return: The last_updated of this Current.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Current.


        :param last_updated: The last_updated of this Current.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def temp_c(self):
        """Gets the temp_c of this Current.  # noqa: E501


        :return: The temp_c of this Current.  # noqa: E501
        :rtype: float
        """
        return self._temp_c

    @temp_c.setter
    def temp_c(self, temp_c):
        """Sets the temp_c of this Current.


        :param temp_c: The temp_c of this Current.  # noqa: E501
        :type: float
        """

        self._temp_c = temp_c

    @property
    def temp_f(self):
        """Gets the temp_f of this Current.  # noqa: E501


        :return: The temp_f of this Current.  # noqa: E501
        :rtype: float
        """
        return self._temp_f

    @temp_f.setter
    def temp_f(self, temp_f):
        """Sets the temp_f of this Current.


        :param temp_f: The temp_f of this Current.  # noqa: E501
        :type: float
        """

        self._temp_f = temp_f

    @property
    def is_day(self):
        """Gets the is_day of this Current.  # noqa: E501


        :return: The is_day of this Current.  # noqa: E501
        :rtype: int
        """
        return self._is_day

    @is_day.setter
    def is_day(self, is_day):
        """Sets the is_day of this Current.


        :param is_day: The is_day of this Current.  # noqa: E501
        :type: int
        """

        self._is_day = is_day

    @property
    def condition(self):
        """Gets the condition of this Current.  # noqa: E501


        :return: The condition of this Current.  # noqa: E501
        :rtype: CurrentCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Current.


        :param condition: The condition of this Current.  # noqa: E501
        :type: CurrentCondition
        """

        self._condition = condition

    @property
    def wind_mph(self):
        """Gets the wind_mph of this Current.  # noqa: E501


        :return: The wind_mph of this Current.  # noqa: E501
        :rtype: float
        """
        return self._wind_mph

    @wind_mph.setter
    def wind_mph(self, wind_mph):
        """Sets the wind_mph of this Current.


        :param wind_mph: The wind_mph of this Current.  # noqa: E501
        :type: float
        """

        self._wind_mph = wind_mph

    @property
    def wind_kph(self):
        """Gets the wind_kph of this Current.  # noqa: E501


        :return: The wind_kph of this Current.  # noqa: E501
        :rtype: float
        """
        return self._wind_kph

    @wind_kph.setter
    def wind_kph(self, wind_kph):
        """Sets the wind_kph of this Current.


        :param wind_kph: The wind_kph of this Current.  # noqa: E501
        :type: float
        """

        self._wind_kph = wind_kph

    @property
    def wind_degree(self):
        """Gets the wind_degree of this Current.  # noqa: E501


        :return: The wind_degree of this Current.  # noqa: E501
        :rtype: float
        """
        return self._wind_degree

    @wind_degree.setter
    def wind_degree(self, wind_degree):
        """Sets the wind_degree of this Current.


        :param wind_degree: The wind_degree of this Current.  # noqa: E501
        :type: float
        """

        self._wind_degree = wind_degree

    @property
    def wind_dir(self):
        """Gets the wind_dir of this Current.  # noqa: E501


        :return: The wind_dir of this Current.  # noqa: E501
        :rtype: str
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this Current.


        :param wind_dir: The wind_dir of this Current.  # noqa: E501
        :type: str
        """

        self._wind_dir = wind_dir

    @property
    def pressure_mb(self):
        """Gets the pressure_mb of this Current.  # noqa: E501


        :return: The pressure_mb of this Current.  # noqa: E501
        :rtype: float
        """
        return self._pressure_mb

    @pressure_mb.setter
    def pressure_mb(self, pressure_mb):
        """Sets the pressure_mb of this Current.


        :param pressure_mb: The pressure_mb of this Current.  # noqa: E501
        :type: float
        """

        self._pressure_mb = pressure_mb

    @property
    def pressure_in(self):
        """Gets the pressure_in of this Current.  # noqa: E501


        :return: The pressure_in of this Current.  # noqa: E501
        :rtype: float
        """
        return self._pressure_in

    @pressure_in.setter
    def pressure_in(self, pressure_in):
        """Sets the pressure_in of this Current.


        :param pressure_in: The pressure_in of this Current.  # noqa: E501
        :type: float
        """

        self._pressure_in = pressure_in

    @property
    def precip_mm(self):
        """Gets the precip_mm of this Current.  # noqa: E501


        :return: The precip_mm of this Current.  # noqa: E501
        :rtype: float
        """
        return self._precip_mm

    @precip_mm.setter
    def precip_mm(self, precip_mm):
        """Sets the precip_mm of this Current.


        :param precip_mm: The precip_mm of this Current.  # noqa: E501
        :type: float
        """

        self._precip_mm = precip_mm

    @property
    def precip_in(self):
        """Gets the precip_in of this Current.  # noqa: E501


        :return: The precip_in of this Current.  # noqa: E501
        :rtype: float
        """
        return self._precip_in

    @precip_in.setter
    def precip_in(self, precip_in):
        """Sets the precip_in of this Current.


        :param precip_in: The precip_in of this Current.  # noqa: E501
        :type: float
        """

        self._precip_in = precip_in

    @property
    def humidity(self):
        """Gets the humidity of this Current.  # noqa: E501


        :return: The humidity of this Current.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Current.


        :param humidity: The humidity of this Current.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def cloud(self):
        """Gets the cloud of this Current.  # noqa: E501


        :return: The cloud of this Current.  # noqa: E501
        :rtype: float
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this Current.


        :param cloud: The cloud of this Current.  # noqa: E501
        :type: float
        """

        self._cloud = cloud

    @property
    def feelslike_c(self):
        """Gets the feelslike_c of this Current.  # noqa: E501


        :return: The feelslike_c of this Current.  # noqa: E501
        :rtype: float
        """
        return self._feelslike_c

    @feelslike_c.setter
    def feelslike_c(self, feelslike_c):
        """Sets the feelslike_c of this Current.


        :param feelslike_c: The feelslike_c of this Current.  # noqa: E501
        :type: float
        """

        self._feelslike_c = feelslike_c

    @property
    def feelslike_f(self):
        """Gets the feelslike_f of this Current.  # noqa: E501


        :return: The feelslike_f of this Current.  # noqa: E501
        :rtype: float
        """
        return self._feelslike_f

    @feelslike_f.setter
    def feelslike_f(self, feelslike_f):
        """Sets the feelslike_f of this Current.


        :param feelslike_f: The feelslike_f of this Current.  # noqa: E501
        :type: float
        """

        self._feelslike_f = feelslike_f

    @property
    def vis_km(self):
        """Gets the vis_km of this Current.  # noqa: E501


        :return: The vis_km of this Current.  # noqa: E501
        :rtype: float
        """
        return self._vis_km

    @vis_km.setter
    def vis_km(self, vis_km):
        """Sets the vis_km of this Current.


        :param vis_km: The vis_km of this Current.  # noqa: E501
        :type: float
        """

        self._vis_km = vis_km

    @property
    def vis_miles(self):
        """Gets the vis_miles of this Current.  # noqa: E501


        :return: The vis_miles of this Current.  # noqa: E501
        :rtype: float
        """
        return self._vis_miles

    @vis_miles.setter
    def vis_miles(self, vis_miles):
        """Sets the vis_miles of this Current.


        :param vis_miles: The vis_miles of this Current.  # noqa: E501
        :type: float
        """

        self._vis_miles = vis_miles

    @property
    def uv(self):
        """Gets the uv of this Current.  # noqa: E501


        :return: The uv of this Current.  # noqa: E501
        :rtype: int
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this Current.


        :param uv: The uv of this Current.  # noqa: E501
        :type: int
        """

        self._uv = uv

    @property
    def gust_mph(self):
        """Gets the gust_mph of this Current.  # noqa: E501


        :return: The gust_mph of this Current.  # noqa: E501
        :rtype: float
        """
        return self._gust_mph

    @gust_mph.setter
    def gust_mph(self, gust_mph):
        """Sets the gust_mph of this Current.


        :param gust_mph: The gust_mph of this Current.  # noqa: E501
        :type: float
        """

        self._gust_mph = gust_mph

    @property
    def gust_kph(self):
        """Gets the gust_kph of this Current.  # noqa: E501


        :return: The gust_kph of this Current.  # noqa: E501
        :rtype: float
        """
        return self._gust_kph

    @gust_kph.setter
    def gust_kph(self, gust_kph):
        """Sets the gust_kph of this Current.


        :param gust_kph: The gust_kph of this Current.  # noqa: E501
        :type: float
        """

        self._gust_kph = gust_kph

    @property
    def air_quality(self):
        """Gets the air_quality of this Current.  # noqa: E501


        :return: The air_quality of this Current.  # noqa: E501
        :rtype: CurrentAirQuality
        """
        return self._air_quality

    @air_quality.setter
    def air_quality(self, air_quality):
        """Sets the air_quality of this Current.


        :param air_quality: The air_quality of this Current.  # noqa: E501
        :type: CurrentAirQuality
        """

        self._air_quality = air_quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Current, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Current):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Current):
            return True

        return self.to_dict() != other.to_dict()
