# coding: utf-8

"""
    Weather API

    # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY    # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CurrentAirQuality(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'co': 'float',
        'no2': 'float',
        'o3': 'float',
        'so2': 'float',
        'pm2_5': 'float',
        'pm10': 'float',
        'us_epa_index': 'int',
        'gb_defra_index': 'int'
    }

    attribute_map = {
        'co': 'co',
        'no2': 'no2',
        'o3': 'o3',
        'so2': 'so2',
        'pm2_5': 'pm2_5',
        'pm10': 'pm10',
        'us_epa_index': 'us-epa-index',
        'gb_defra_index': 'gb-defra-index'
    }

    def __init__(self, co=None, no2=None, o3=None, so2=None, pm2_5=None, pm10=None, us_epa_index=None, gb_defra_index=None, _configuration=None):  # noqa: E501
        """CurrentAirQuality - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._co = None
        self._no2 = None
        self._o3 = None
        self._so2 = None
        self._pm2_5 = None
        self._pm10 = None
        self._us_epa_index = None
        self._gb_defra_index = None
        self.discriminator = None

        if co is not None:
            self.co = co
        if no2 is not None:
            self.no2 = no2
        if o3 is not None:
            self.o3 = o3
        if so2 is not None:
            self.so2 = so2
        if pm2_5 is not None:
            self.pm2_5 = pm2_5
        if pm10 is not None:
            self.pm10 = pm10
        if us_epa_index is not None:
            self.us_epa_index = us_epa_index
        if gb_defra_index is not None:
            self.gb_defra_index = gb_defra_index

    @property
    def co(self):
        """Gets the co of this CurrentAirQuality.  # noqa: E501


        :return: The co of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._co

    @co.setter
    def co(self, co):
        """Sets the co of this CurrentAirQuality.


        :param co: The co of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._co = co

    @property
    def no2(self):
        """Gets the no2 of this CurrentAirQuality.  # noqa: E501


        :return: The no2 of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._no2

    @no2.setter
    def no2(self, no2):
        """Sets the no2 of this CurrentAirQuality.


        :param no2: The no2 of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._no2 = no2

    @property
    def o3(self):
        """Gets the o3 of this CurrentAirQuality.  # noqa: E501


        :return: The o3 of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._o3

    @o3.setter
    def o3(self, o3):
        """Sets the o3 of this CurrentAirQuality.


        :param o3: The o3 of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._o3 = o3

    @property
    def so2(self):
        """Gets the so2 of this CurrentAirQuality.  # noqa: E501


        :return: The so2 of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._so2

    @so2.setter
    def so2(self, so2):
        """Sets the so2 of this CurrentAirQuality.


        :param so2: The so2 of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._so2 = so2

    @property
    def pm2_5(self):
        """Gets the pm2_5 of this CurrentAirQuality.  # noqa: E501


        :return: The pm2_5 of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._pm2_5

    @pm2_5.setter
    def pm2_5(self, pm2_5):
        """Sets the pm2_5 of this CurrentAirQuality.


        :param pm2_5: The pm2_5 of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._pm2_5 = pm2_5

    @property
    def pm10(self):
        """Gets the pm10 of this CurrentAirQuality.  # noqa: E501


        :return: The pm10 of this CurrentAirQuality.  # noqa: E501
        :rtype: float
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10):
        """Sets the pm10 of this CurrentAirQuality.


        :param pm10: The pm10 of this CurrentAirQuality.  # noqa: E501
        :type: float
        """

        self._pm10 = pm10

    @property
    def us_epa_index(self):
        """Gets the us_epa_index of this CurrentAirQuality.  # noqa: E501


        :return: The us_epa_index of this CurrentAirQuality.  # noqa: E501
        :rtype: int
        """
        return self._us_epa_index

    @us_epa_index.setter
    def us_epa_index(self, us_epa_index):
        """Sets the us_epa_index of this CurrentAirQuality.


        :param us_epa_index: The us_epa_index of this CurrentAirQuality.  # noqa: E501
        :type: int
        """

        self._us_epa_index = us_epa_index

    @property
    def gb_defra_index(self):
        """Gets the gb_defra_index of this CurrentAirQuality.  # noqa: E501


        :return: The gb_defra_index of this CurrentAirQuality.  # noqa: E501
        :rtype: int
        """
        return self._gb_defra_index

    @gb_defra_index.setter
    def gb_defra_index(self, gb_defra_index):
        """Sets the gb_defra_index of this CurrentAirQuality.


        :param gb_defra_index: The gb_defra_index of this CurrentAirQuality.  # noqa: E501
        :type: int
        """

        self._gb_defra_index = gb_defra_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentAirQuality, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentAirQuality):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentAirQuality):
            return True

        return self.to_dict() != other.to_dict()
