# coding: utf-8

"""
    Weather API

    # Introduction WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy. We provide following data through our API:     - Real-time weather - 14 day weather forecast - Historical Weather - Marine Weather and Tide Data - Future Weather (Upto 365 days ahead) - Daily and hourly intervals - 15 min interval (Enterprise only) - Astronomy - Time zone - Location data - Sports - Search or Autocomplete API - Weather Alerts - Air Quality Data - Bulk Request  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  Try our weather API by using interactive [API Explorer](https://www.weatherapi.com/api-explorer.aspx).  We also have SDK for popular framework/languages available on [Github](https://github.com/weatherapicom/) for quick integrations.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.    Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=YOUR API KEY    # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MarineHour(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_epoch': 'int',
        'time': 'str',
        'temp_c': 'float',
        'temp_f': 'float',
        'is_day': 'int',
        'condition': 'ForecastCondition',
        'wind_mph': 'float',
        'wind_kph': 'float',
        'wind_degree': 'float',
        'wind_dir': 'str',
        'pressure_mb': 'float',
        'pressure_in': 'float',
        'precip_mm': 'float',
        'precip_in': 'float',
        'humidity': 'float',
        'cloud': 'float',
        'feelslike_c': 'float',
        'feelslike_f': 'float',
        'windchill_c': 'float',
        'windchill_f': 'float',
        'heatindex_c': 'float',
        'heatindex_f': 'float',
        'dewpoint_c': 'float',
        'dewpoint_f': 'float',
        'will_it_rain': 'int',
        'chance_of_rain': 'float',
        'will_it_snow': 'int',
        'chance_of_snow': 'float',
        'vis_km': 'float',
        'vis_miles': 'float',
        'gust_mph': 'float',
        'gust_kph': 'float',
        'sig_ht_mt': 'float',
        'swell_ht_mt': 'float',
        'swell_ht_ft': 'float',
        'swell_dir': 'float',
        'swell_dir_16_point': 'float',
        'swell_period_secs': 'float',
        'uv': 'int'
    }

    attribute_map = {
        'time_epoch': 'time_epoch',
        'time': 'time',
        'temp_c': 'temp_c',
        'temp_f': 'temp_f',
        'is_day': 'is_day',
        'condition': 'condition',
        'wind_mph': 'wind_mph',
        'wind_kph': 'wind_kph',
        'wind_degree': 'wind_degree',
        'wind_dir': 'wind_dir',
        'pressure_mb': 'pressure_mb',
        'pressure_in': 'pressure_in',
        'precip_mm': 'precip_mm',
        'precip_in': 'precip_in',
        'humidity': 'humidity',
        'cloud': 'cloud',
        'feelslike_c': 'feelslike_c',
        'feelslike_f': 'feelslike_f',
        'windchill_c': 'windchill_c',
        'windchill_f': 'windchill_f',
        'heatindex_c': 'heatindex_c',
        'heatindex_f': 'heatindex_f',
        'dewpoint_c': 'dewpoint_c',
        'dewpoint_f': 'dewpoint_f',
        'will_it_rain': 'will_it_rain',
        'chance_of_rain': 'chance_of_rain',
        'will_it_snow': 'will_it_snow',
        'chance_of_snow': 'chance_of_snow',
        'vis_km': 'vis_km',
        'vis_miles': 'vis_miles',
        'gust_mph': 'gust_mph',
        'gust_kph': 'gust_kph',
        'sig_ht_mt': 'sig_ht_mt',
        'swell_ht_mt': 'swell_ht_mt',
        'swell_ht_ft': 'swell_ht_ft',
        'swell_dir': 'swell_dir',
        'swell_dir_16_point': 'swell_dir_16_point',
        'swell_period_secs': 'swell_period_secs',
        'uv': 'uv'
    }

    def __init__(self, time_epoch=None, time=None, temp_c=None, temp_f=None, is_day=None, condition=None, wind_mph=None, wind_kph=None, wind_degree=None, wind_dir=None, pressure_mb=None, pressure_in=None, precip_mm=None, precip_in=None, humidity=None, cloud=None, feelslike_c=None, feelslike_f=None, windchill_c=None, windchill_f=None, heatindex_c=None, heatindex_f=None, dewpoint_c=None, dewpoint_f=None, will_it_rain=None, chance_of_rain=None, will_it_snow=None, chance_of_snow=None, vis_km=None, vis_miles=None, gust_mph=None, gust_kph=None, sig_ht_mt=None, swell_ht_mt=None, swell_ht_ft=None, swell_dir=None, swell_dir_16_point=None, swell_period_secs=None, uv=None, _configuration=None):  # noqa: E501
        """MarineHour - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time_epoch = None
        self._time = None
        self._temp_c = None
        self._temp_f = None
        self._is_day = None
        self._condition = None
        self._wind_mph = None
        self._wind_kph = None
        self._wind_degree = None
        self._wind_dir = None
        self._pressure_mb = None
        self._pressure_in = None
        self._precip_mm = None
        self._precip_in = None
        self._humidity = None
        self._cloud = None
        self._feelslike_c = None
        self._feelslike_f = None
        self._windchill_c = None
        self._windchill_f = None
        self._heatindex_c = None
        self._heatindex_f = None
        self._dewpoint_c = None
        self._dewpoint_f = None
        self._will_it_rain = None
        self._chance_of_rain = None
        self._will_it_snow = None
        self._chance_of_snow = None
        self._vis_km = None
        self._vis_miles = None
        self._gust_mph = None
        self._gust_kph = None
        self._sig_ht_mt = None
        self._swell_ht_mt = None
        self._swell_ht_ft = None
        self._swell_dir = None
        self._swell_dir_16_point = None
        self._swell_period_secs = None
        self._uv = None
        self.discriminator = None

        if time_epoch is not None:
            self.time_epoch = time_epoch
        if time is not None:
            self.time = time
        if temp_c is not None:
            self.temp_c = temp_c
        if temp_f is not None:
            self.temp_f = temp_f
        if is_day is not None:
            self.is_day = is_day
        if condition is not None:
            self.condition = condition
        if wind_mph is not None:
            self.wind_mph = wind_mph
        if wind_kph is not None:
            self.wind_kph = wind_kph
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if pressure_mb is not None:
            self.pressure_mb = pressure_mb
        if pressure_in is not None:
            self.pressure_in = pressure_in
        if precip_mm is not None:
            self.precip_mm = precip_mm
        if precip_in is not None:
            self.precip_in = precip_in
        if humidity is not None:
            self.humidity = humidity
        if cloud is not None:
            self.cloud = cloud
        if feelslike_c is not None:
            self.feelslike_c = feelslike_c
        if feelslike_f is not None:
            self.feelslike_f = feelslike_f
        if windchill_c is not None:
            self.windchill_c = windchill_c
        if windchill_f is not None:
            self.windchill_f = windchill_f
        if heatindex_c is not None:
            self.heatindex_c = heatindex_c
        if heatindex_f is not None:
            self.heatindex_f = heatindex_f
        if dewpoint_c is not None:
            self.dewpoint_c = dewpoint_c
        if dewpoint_f is not None:
            self.dewpoint_f = dewpoint_f
        if will_it_rain is not None:
            self.will_it_rain = will_it_rain
        if chance_of_rain is not None:
            self.chance_of_rain = chance_of_rain
        if will_it_snow is not None:
            self.will_it_snow = will_it_snow
        if chance_of_snow is not None:
            self.chance_of_snow = chance_of_snow
        if vis_km is not None:
            self.vis_km = vis_km
        if vis_miles is not None:
            self.vis_miles = vis_miles
        if gust_mph is not None:
            self.gust_mph = gust_mph
        if gust_kph is not None:
            self.gust_kph = gust_kph
        if sig_ht_mt is not None:
            self.sig_ht_mt = sig_ht_mt
        if swell_ht_mt is not None:
            self.swell_ht_mt = swell_ht_mt
        if swell_ht_ft is not None:
            self.swell_ht_ft = swell_ht_ft
        if swell_dir is not None:
            self.swell_dir = swell_dir
        if swell_dir_16_point is not None:
            self.swell_dir_16_point = swell_dir_16_point
        if swell_period_secs is not None:
            self.swell_period_secs = swell_period_secs
        if uv is not None:
            self.uv = uv

    @property
    def time_epoch(self):
        """Gets the time_epoch of this MarineHour.  # noqa: E501


        :return: The time_epoch of this MarineHour.  # noqa: E501
        :rtype: int
        """
        return self._time_epoch

    @time_epoch.setter
    def time_epoch(self, time_epoch):
        """Sets the time_epoch of this MarineHour.


        :param time_epoch: The time_epoch of this MarineHour.  # noqa: E501
        :type: int
        """

        self._time_epoch = time_epoch

    @property
    def time(self):
        """Gets the time of this MarineHour.  # noqa: E501


        :return: The time of this MarineHour.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MarineHour.


        :param time: The time of this MarineHour.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def temp_c(self):
        """Gets the temp_c of this MarineHour.  # noqa: E501


        :return: The temp_c of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._temp_c

    @temp_c.setter
    def temp_c(self, temp_c):
        """Sets the temp_c of this MarineHour.


        :param temp_c: The temp_c of this MarineHour.  # noqa: E501
        :type: float
        """

        self._temp_c = temp_c

    @property
    def temp_f(self):
        """Gets the temp_f of this MarineHour.  # noqa: E501


        :return: The temp_f of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._temp_f

    @temp_f.setter
    def temp_f(self, temp_f):
        """Sets the temp_f of this MarineHour.


        :param temp_f: The temp_f of this MarineHour.  # noqa: E501
        :type: float
        """

        self._temp_f = temp_f

    @property
    def is_day(self):
        """Gets the is_day of this MarineHour.  # noqa: E501


        :return: The is_day of this MarineHour.  # noqa: E501
        :rtype: int
        """
        return self._is_day

    @is_day.setter
    def is_day(self, is_day):
        """Sets the is_day of this MarineHour.


        :param is_day: The is_day of this MarineHour.  # noqa: E501
        :type: int
        """

        self._is_day = is_day

    @property
    def condition(self):
        """Gets the condition of this MarineHour.  # noqa: E501


        :return: The condition of this MarineHour.  # noqa: E501
        :rtype: ForecastCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this MarineHour.


        :param condition: The condition of this MarineHour.  # noqa: E501
        :type: ForecastCondition
        """

        self._condition = condition

    @property
    def wind_mph(self):
        """Gets the wind_mph of this MarineHour.  # noqa: E501


        :return: The wind_mph of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._wind_mph

    @wind_mph.setter
    def wind_mph(self, wind_mph):
        """Sets the wind_mph of this MarineHour.


        :param wind_mph: The wind_mph of this MarineHour.  # noqa: E501
        :type: float
        """

        self._wind_mph = wind_mph

    @property
    def wind_kph(self):
        """Gets the wind_kph of this MarineHour.  # noqa: E501


        :return: The wind_kph of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._wind_kph

    @wind_kph.setter
    def wind_kph(self, wind_kph):
        """Sets the wind_kph of this MarineHour.


        :param wind_kph: The wind_kph of this MarineHour.  # noqa: E501
        :type: float
        """

        self._wind_kph = wind_kph

    @property
    def wind_degree(self):
        """Gets the wind_degree of this MarineHour.  # noqa: E501


        :return: The wind_degree of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._wind_degree

    @wind_degree.setter
    def wind_degree(self, wind_degree):
        """Sets the wind_degree of this MarineHour.


        :param wind_degree: The wind_degree of this MarineHour.  # noqa: E501
        :type: float
        """

        self._wind_degree = wind_degree

    @property
    def wind_dir(self):
        """Gets the wind_dir of this MarineHour.  # noqa: E501


        :return: The wind_dir of this MarineHour.  # noqa: E501
        :rtype: str
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir):
        """Sets the wind_dir of this MarineHour.


        :param wind_dir: The wind_dir of this MarineHour.  # noqa: E501
        :type: str
        """

        self._wind_dir = wind_dir

    @property
    def pressure_mb(self):
        """Gets the pressure_mb of this MarineHour.  # noqa: E501


        :return: The pressure_mb of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._pressure_mb

    @pressure_mb.setter
    def pressure_mb(self, pressure_mb):
        """Sets the pressure_mb of this MarineHour.


        :param pressure_mb: The pressure_mb of this MarineHour.  # noqa: E501
        :type: float
        """

        self._pressure_mb = pressure_mb

    @property
    def pressure_in(self):
        """Gets the pressure_in of this MarineHour.  # noqa: E501


        :return: The pressure_in of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._pressure_in

    @pressure_in.setter
    def pressure_in(self, pressure_in):
        """Sets the pressure_in of this MarineHour.


        :param pressure_in: The pressure_in of this MarineHour.  # noqa: E501
        :type: float
        """

        self._pressure_in = pressure_in

    @property
    def precip_mm(self):
        """Gets the precip_mm of this MarineHour.  # noqa: E501


        :return: The precip_mm of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._precip_mm

    @precip_mm.setter
    def precip_mm(self, precip_mm):
        """Sets the precip_mm of this MarineHour.


        :param precip_mm: The precip_mm of this MarineHour.  # noqa: E501
        :type: float
        """

        self._precip_mm = precip_mm

    @property
    def precip_in(self):
        """Gets the precip_in of this MarineHour.  # noqa: E501


        :return: The precip_in of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._precip_in

    @precip_in.setter
    def precip_in(self, precip_in):
        """Sets the precip_in of this MarineHour.


        :param precip_in: The precip_in of this MarineHour.  # noqa: E501
        :type: float
        """

        self._precip_in = precip_in

    @property
    def humidity(self):
        """Gets the humidity of this MarineHour.  # noqa: E501


        :return: The humidity of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this MarineHour.


        :param humidity: The humidity of this MarineHour.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def cloud(self):
        """Gets the cloud of this MarineHour.  # noqa: E501


        :return: The cloud of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this MarineHour.


        :param cloud: The cloud of this MarineHour.  # noqa: E501
        :type: float
        """

        self._cloud = cloud

    @property
    def feelslike_c(self):
        """Gets the feelslike_c of this MarineHour.  # noqa: E501


        :return: The feelslike_c of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._feelslike_c

    @feelslike_c.setter
    def feelslike_c(self, feelslike_c):
        """Sets the feelslike_c of this MarineHour.


        :param feelslike_c: The feelslike_c of this MarineHour.  # noqa: E501
        :type: float
        """

        self._feelslike_c = feelslike_c

    @property
    def feelslike_f(self):
        """Gets the feelslike_f of this MarineHour.  # noqa: E501


        :return: The feelslike_f of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._feelslike_f

    @feelslike_f.setter
    def feelslike_f(self, feelslike_f):
        """Sets the feelslike_f of this MarineHour.


        :param feelslike_f: The feelslike_f of this MarineHour.  # noqa: E501
        :type: float
        """

        self._feelslike_f = feelslike_f

    @property
    def windchill_c(self):
        """Gets the windchill_c of this MarineHour.  # noqa: E501


        :return: The windchill_c of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._windchill_c

    @windchill_c.setter
    def windchill_c(self, windchill_c):
        """Sets the windchill_c of this MarineHour.


        :param windchill_c: The windchill_c of this MarineHour.  # noqa: E501
        :type: float
        """

        self._windchill_c = windchill_c

    @property
    def windchill_f(self):
        """Gets the windchill_f of this MarineHour.  # noqa: E501


        :return: The windchill_f of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._windchill_f

    @windchill_f.setter
    def windchill_f(self, windchill_f):
        """Sets the windchill_f of this MarineHour.


        :param windchill_f: The windchill_f of this MarineHour.  # noqa: E501
        :type: float
        """

        self._windchill_f = windchill_f

    @property
    def heatindex_c(self):
        """Gets the heatindex_c of this MarineHour.  # noqa: E501


        :return: The heatindex_c of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._heatindex_c

    @heatindex_c.setter
    def heatindex_c(self, heatindex_c):
        """Sets the heatindex_c of this MarineHour.


        :param heatindex_c: The heatindex_c of this MarineHour.  # noqa: E501
        :type: float
        """

        self._heatindex_c = heatindex_c

    @property
    def heatindex_f(self):
        """Gets the heatindex_f of this MarineHour.  # noqa: E501


        :return: The heatindex_f of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._heatindex_f

    @heatindex_f.setter
    def heatindex_f(self, heatindex_f):
        """Sets the heatindex_f of this MarineHour.


        :param heatindex_f: The heatindex_f of this MarineHour.  # noqa: E501
        :type: float
        """

        self._heatindex_f = heatindex_f

    @property
    def dewpoint_c(self):
        """Gets the dewpoint_c of this MarineHour.  # noqa: E501


        :return: The dewpoint_c of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._dewpoint_c

    @dewpoint_c.setter
    def dewpoint_c(self, dewpoint_c):
        """Sets the dewpoint_c of this MarineHour.


        :param dewpoint_c: The dewpoint_c of this MarineHour.  # noqa: E501
        :type: float
        """

        self._dewpoint_c = dewpoint_c

    @property
    def dewpoint_f(self):
        """Gets the dewpoint_f of this MarineHour.  # noqa: E501


        :return: The dewpoint_f of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._dewpoint_f

    @dewpoint_f.setter
    def dewpoint_f(self, dewpoint_f):
        """Sets the dewpoint_f of this MarineHour.


        :param dewpoint_f: The dewpoint_f of this MarineHour.  # noqa: E501
        :type: float
        """

        self._dewpoint_f = dewpoint_f

    @property
    def will_it_rain(self):
        """Gets the will_it_rain of this MarineHour.  # noqa: E501


        :return: The will_it_rain of this MarineHour.  # noqa: E501
        :rtype: int
        """
        return self._will_it_rain

    @will_it_rain.setter
    def will_it_rain(self, will_it_rain):
        """Sets the will_it_rain of this MarineHour.


        :param will_it_rain: The will_it_rain of this MarineHour.  # noqa: E501
        :type: int
        """

        self._will_it_rain = will_it_rain

    @property
    def chance_of_rain(self):
        """Gets the chance_of_rain of this MarineHour.  # noqa: E501


        :return: The chance_of_rain of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._chance_of_rain

    @chance_of_rain.setter
    def chance_of_rain(self, chance_of_rain):
        """Sets the chance_of_rain of this MarineHour.


        :param chance_of_rain: The chance_of_rain of this MarineHour.  # noqa: E501
        :type: float
        """

        self._chance_of_rain = chance_of_rain

    @property
    def will_it_snow(self):
        """Gets the will_it_snow of this MarineHour.  # noqa: E501


        :return: The will_it_snow of this MarineHour.  # noqa: E501
        :rtype: int
        """
        return self._will_it_snow

    @will_it_snow.setter
    def will_it_snow(self, will_it_snow):
        """Sets the will_it_snow of this MarineHour.


        :param will_it_snow: The will_it_snow of this MarineHour.  # noqa: E501
        :type: int
        """

        self._will_it_snow = will_it_snow

    @property
    def chance_of_snow(self):
        """Gets the chance_of_snow of this MarineHour.  # noqa: E501


        :return: The chance_of_snow of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._chance_of_snow

    @chance_of_snow.setter
    def chance_of_snow(self, chance_of_snow):
        """Sets the chance_of_snow of this MarineHour.


        :param chance_of_snow: The chance_of_snow of this MarineHour.  # noqa: E501
        :type: float
        """

        self._chance_of_snow = chance_of_snow

    @property
    def vis_km(self):
        """Gets the vis_km of this MarineHour.  # noqa: E501


        :return: The vis_km of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._vis_km

    @vis_km.setter
    def vis_km(self, vis_km):
        """Sets the vis_km of this MarineHour.


        :param vis_km: The vis_km of this MarineHour.  # noqa: E501
        :type: float
        """

        self._vis_km = vis_km

    @property
    def vis_miles(self):
        """Gets the vis_miles of this MarineHour.  # noqa: E501


        :return: The vis_miles of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._vis_miles

    @vis_miles.setter
    def vis_miles(self, vis_miles):
        """Sets the vis_miles of this MarineHour.


        :param vis_miles: The vis_miles of this MarineHour.  # noqa: E501
        :type: float
        """

        self._vis_miles = vis_miles

    @property
    def gust_mph(self):
        """Gets the gust_mph of this MarineHour.  # noqa: E501


        :return: The gust_mph of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._gust_mph

    @gust_mph.setter
    def gust_mph(self, gust_mph):
        """Sets the gust_mph of this MarineHour.


        :param gust_mph: The gust_mph of this MarineHour.  # noqa: E501
        :type: float
        """

        self._gust_mph = gust_mph

    @property
    def gust_kph(self):
        """Gets the gust_kph of this MarineHour.  # noqa: E501


        :return: The gust_kph of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._gust_kph

    @gust_kph.setter
    def gust_kph(self, gust_kph):
        """Sets the gust_kph of this MarineHour.


        :param gust_kph: The gust_kph of this MarineHour.  # noqa: E501
        :type: float
        """

        self._gust_kph = gust_kph

    @property
    def sig_ht_mt(self):
        """Gets the sig_ht_mt of this MarineHour.  # noqa: E501


        :return: The sig_ht_mt of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._sig_ht_mt

    @sig_ht_mt.setter
    def sig_ht_mt(self, sig_ht_mt):
        """Sets the sig_ht_mt of this MarineHour.


        :param sig_ht_mt: The sig_ht_mt of this MarineHour.  # noqa: E501
        :type: float
        """

        self._sig_ht_mt = sig_ht_mt

    @property
    def swell_ht_mt(self):
        """Gets the swell_ht_mt of this MarineHour.  # noqa: E501


        :return: The swell_ht_mt of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._swell_ht_mt

    @swell_ht_mt.setter
    def swell_ht_mt(self, swell_ht_mt):
        """Sets the swell_ht_mt of this MarineHour.


        :param swell_ht_mt: The swell_ht_mt of this MarineHour.  # noqa: E501
        :type: float
        """

        self._swell_ht_mt = swell_ht_mt

    @property
    def swell_ht_ft(self):
        """Gets the swell_ht_ft of this MarineHour.  # noqa: E501


        :return: The swell_ht_ft of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._swell_ht_ft

    @swell_ht_ft.setter
    def swell_ht_ft(self, swell_ht_ft):
        """Sets the swell_ht_ft of this MarineHour.


        :param swell_ht_ft: The swell_ht_ft of this MarineHour.  # noqa: E501
        :type: float
        """

        self._swell_ht_ft = swell_ht_ft

    @property
    def swell_dir(self):
        """Gets the swell_dir of this MarineHour.  # noqa: E501


        :return: The swell_dir of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._swell_dir

    @swell_dir.setter
    def swell_dir(self, swell_dir):
        """Sets the swell_dir of this MarineHour.


        :param swell_dir: The swell_dir of this MarineHour.  # noqa: E501
        :type: float
        """

        self._swell_dir = swell_dir

    @property
    def swell_dir_16_point(self):
        """Gets the swell_dir_16_point of this MarineHour.  # noqa: E501


        :return: The swell_dir_16_point of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._swell_dir_16_point

    @swell_dir_16_point.setter
    def swell_dir_16_point(self, swell_dir_16_point):
        """Sets the swell_dir_16_point of this MarineHour.


        :param swell_dir_16_point: The swell_dir_16_point of this MarineHour.  # noqa: E501
        :type: float
        """

        self._swell_dir_16_point = swell_dir_16_point

    @property
    def swell_period_secs(self):
        """Gets the swell_period_secs of this MarineHour.  # noqa: E501


        :return: The swell_period_secs of this MarineHour.  # noqa: E501
        :rtype: float
        """
        return self._swell_period_secs

    @swell_period_secs.setter
    def swell_period_secs(self, swell_period_secs):
        """Sets the swell_period_secs of this MarineHour.


        :param swell_period_secs: The swell_period_secs of this MarineHour.  # noqa: E501
        :type: float
        """

        self._swell_period_secs = swell_period_secs

    @property
    def uv(self):
        """Gets the uv of this MarineHour.  # noqa: E501


        :return: The uv of this MarineHour.  # noqa: E501
        :rtype: int
        """
        return self._uv

    @uv.setter
    def uv(self, uv):
        """Sets the uv of this MarineHour.


        :param uv: The uv of this MarineHour.  # noqa: E501
        :type: int
        """

        self._uv = uv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarineHour, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarineHour):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarineHour):
            return True

        return self.to_dict() != other.to_dict()
